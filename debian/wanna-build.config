#! /bin/sh

set -e

# Load debconf
. /usr/share/debconf/confmodule


is_initial_configuration() {						# {{{
  # Check if this is the initial configuration and not an upgrade of an 
  # existing configuration
  # Usage: if is_initial_configuration "$@"; then ... fi from top level

  # Plain installation
  if [ "$1" = configure ] && [ -z "$2" ]; then
    return 0
  fi
  # Configuration via dpkg-reconfigure
  if [ "$1" = reconfigure ] || [ "$DEBCONF_RECONFIGURE" ]; then
    return 0
  fi
  return 1
}

# Check if the user wants to configure slapd manually
want_manual_configuration() {
  db_input medium wanna-build/no_configuration || true
  db_go || true
  db_get wanna-build/no_configuration
  no_configuration="$RET"
  
  if [ "$no_configuration" = "true" ]; then
    return 0
  fi
  return 1
}

# Make sure the values entered make sense
validate_initial_config() {
  local invalid
  invalid=""
 
  db_get wanna-build/arches
  if [ -z "$RET" ] || ! echo "$RET" | grep -q '^[a-zA-Z0-9 ]+$'; then
    db_fset wanna-build/arches seen false
    invalid=true
  fi

  db_get wanna-build/distribs
  if [ -z "$RET" ] || ! echo "$RET" | grep -q '^[a-zA-Z ]+$'; then
    db_fset wanna-build/distribs seen false
    invalid=true
  fi
 
  # Make sure the posrgres wbadm passwords match
  local pass1 pass2
  db_get wanna-build/password1
  pass1="$RET"
  db_get wanna-build/password2
  pass2="$RET"
  
  if [ "$pass1" != "$pass2" ]; then
    db_fset wanna-build/password1 seen false
    db_fset wanna-build/password2 seen false
    invalid=true
  fi

  # Tell the user
  if [ "$invalid" ]; then
    db_fset wanna-build/invalid_config seen false
    db_input critical wanna-build/invalid_config || true
    db_go || true
    db_get wanna-build/invalid_config
    if [ "$RET" != "true" ]; then
      db_set wanna-build/no_configuration true
      invalid=
    fi
  fi

  if [ "$invalid" ]; then 
    return 1
  else
    return 0
  fi
}

# Query the information we need to create an initial directory
query_initial_config() {
  while true; do
    db_input medium wanna-build/arches   || true
    db_input medium wanna-build/distribs || true
    db_input high slapd/password1 || true
    db_input high slapd/password2 || true
    # XXX - should be done more general, but for now this should do
    # the trick
    #if [ -e "/var/lib/ldap" ] && ! is_empty_dir /var/lib/ldap; then
    #  db_input low slapd/move_old_database || true
    #fi
    db_go || true

    if validate_initial_config; then
      break
    fi
  done
}

set_arches() {
  db_get wanna-build/arches
  arches="$RET"
  # here we update the arches_table.sh, used to regenerate the sql script
  arches_tables_sh=$(cat << EOF
  #!/bin/sh
  ARCHES="${arches}"

  rm -f arches-tables.sql
  for arch in $ARCHES; do sed -e "s/ARCH/$arch/g" < arches-tables.in >>
    $tmpdir/arches-tables.sql ; done
  EOF
  )
  # executing sh script without storing it into /tmp, supporting noexec tmp
  # dir
  $SHELL -c "$arches_tables_sh"
}

set_database_configuration() {
  # first create the database and the database user
  db_get wanna-build/password1
  pass="$RET"
  db_get wanna-build/distribs
  distribs="$RET"
  db_get wanna-build/arches
  arches="$RET"

  echo "REATE DATABASE wannadb;
CREATE USER wbadm WITH PASSWORD '$pass';
GRANT ALL PRIVILEGES ON DATABASE wannadb to wbadm;
ALTER USER wbadm CREATEUSER CREATEROLE;" > $tmpdir/create_database.sql
  su postgres -c "psql -f $tmpdir/create_database.sql"
  su postgres -c "psql -d wannadb -f main-tables.sql"
  su postgres -c "psql -d wannadb -f roles.sql"
  su postgres -c "psql -d wannadb -f arches-tables.sql"

  echo '
[wanna-build]
dbname=wannadb
user=wbadm

[wanna-build-privileged]
dbname=wannadb
user=wbadm' >> /etc/postgresql-common/pg_service.conf

# this line should be the first to be matched whatever the pg_hba content is
echo 'local   all             wbadm                                   trust' \
>>  /etc/postgresql/9.6/main/pg_hba.conf

# load distributions table
echo -n "INSERT INTO distributions(distribution,build_dep_resolver,archive)
VALUES" > $tmpdir/wanna_config.sql
for distrib in $distribs; do
  echo "('$distrib','','')," >> $tmpdir/wanna_config.sql
done
echo ";" >> $tmpdir/wanna_config.sql

# load architectures table
echo -n "INSERT INTO architectures(architecture) VALUES " >> $tmpdir/wanna_config.sql
for arch in $arches; do
  echo "('$arch')," >> $tmpdir/wanna_config.sql
done
echo ";" >> $tmpdir/wanna_config.sql

echo -n "INSERT INTO distribution_architectures(distribution,architecture) VALUES " >> $tmpdir/wanna_config.sql
for distrib in $distribs; do
  for arch in $arches; do
    echo "('$distrib','$arch')," >> $tmpdir/wanna_config.sql
  done
done


('sid','i386');

INSERT INTO locks(distribution,architecture) VALUES
('sid','amd64'),('sid','i386');
}

set_wbadm() {
  su
  adduser --system --disabled-password --gecos "Wanna-build user"  wbadm
  mkdir -p /var/lib/wanna-build/tmp
  chmod 750 /srv/wanna-build/tmp/
  chown wbadm. /srv/wanna-build/tmp/
}

# ----- Configuration of pgsql backend and arhces --------------------  {{{
#

# Create initial data on fresh install
if is_initial_configuration "$@"; then
	if ! want_manual_configuration; then
  		export tmpdir=`mktemp -d` 
		set_arches
                set_database_configuration
                rm -rf $tmpdir
                unset tmpdir
	fi
fi

db_go || true

exit 0
